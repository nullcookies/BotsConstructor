@{

    Layout = "_LayoutHome";
    int xMax = 6;
    int yMax = 100;
}
 
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css" />
<link rel="stylesheet" href="@Url.Content("~/css/bot-for-sales.css")" />
<link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.5.0/css/bootstrap4-toggle.min.css" rel="stylesheet">
<link href="@Url.Content("~/lib/open-iconic/font/css/open-iconic-bootstrap.css")" rel="stylesheet">
<link rel="stylesheet" href="@Url.Content("~/css/style-for-drag-and-drop.css")" />

<style>
    .myDichTextarea {
        white-space: nowrap;
        padding: 0;
        margin: 0;
        height: 26px;
        resize: none;
        width: 100px;
        position: relative;
    }
</style>

@* Для drag and drop *@
<!-- remove this if you use Modernizr -->
<script type="19ca72db0d3200ed345d62c6-text/javascript">(function(e,t,n){var r=e.querySelectorAll("html")[0];r.className=r.className.replace(/(^|\s)no-js(\s|$)/,"$1js$2")})(document,window,0);</script>
<script src="https://ajax.cloudflare.com/cdn-cgi/scripts/a2bd7673/cloudflare-static/rocket-loader.min.js" data-cf-settings="19ca72db0d3200ed345d62c6-|49" defer=""></script>

@* Скрипт для drag and drop. Если вынести его в ресурсы, то оно не работает *@
<script type="19ca72db0d3200ed345d62c6-text/javascript">

    'use strict';

    ;( function ( document, window, index )
    {
        // feature detection for drag&drop upload
        var isAdvancedUpload = function()
            {
                var div = document.createElement( 'div' );
                return ( ( 'draggable' in div ) || ( 'ondragstart' in div && 'ondrop' in div ) ) && 'FormData' in window && 'FileReader' in window;
            }();


        // applying the effect for every form
        var forms = document.querySelectorAll( '.boxDragAndDrop' );
        Array.prototype.forEach.call( forms, function( form )
        {
            var input		 = form.querySelector( 'input[type="file"]' ),
                label		 = form.querySelector( 'label' ),
                errorMsg	 = form.querySelector( '.box__error span' ),
                restart		 = form.querySelectorAll( '.box__restart' ),
                droppedFiles = false,
                showFiles	 = function( files )
                {
                    label.textContent = files.length > 1 ? ( input.getAttribute( 'data-multiple-caption' ) || '' ).replace( '{count}', files.length ) : files[ 0 ].name;
                },
                triggerFormSubmit = function()
                {
                    var event = document.createEvent( 'HTMLEvents' );
                    event.initEvent( 'submit', true, false );
                    form.dispatchEvent( event );
                };

            // letting the server side to know we are going to make an Ajax request
            var ajaxFlag = document.createElement( 'input' );
            ajaxFlag.setAttribute( 'type', 'hidden' );
            ajaxFlag.setAttribute( 'name', 'ajax' );
            ajaxFlag.setAttribute( 'value', 1 );
            form.appendChild( ajaxFlag );

            // automatically submit the form on file select
            input.addEventListener( 'change', function( e )
            {
                showFiles( e.target.files );


            });

            // drag&drop files if the feature is available
            if( isAdvancedUpload )
            {
                form.classList.add( 'has-advanced-upload' ); // letting the CSS part to know drag&drop is supported by the browser

                [ 'drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop' ].forEach( function( event )
                {
                    form.addEventListener( event, function( e )
                    {
                        // preventing the unwanted behaviours
                        e.preventDefault();
                        e.stopPropagation();
                    });
                });
                [ 'dragover', 'dragenter' ].forEach( function( event )
                {
                    form.addEventListener( event, function()
                    {
                        form.classList.add( 'is-dragover' );
                    });
                });
                [ 'dragleave', 'dragend', 'drop' ].forEach( function( event )
                {
                    form.addEventListener( event, function()
                    {
                        form.classList.remove( 'is-dragover' );
                    });
                });
                form.addEventListener( 'drop', function( e )
                {
                    droppedFiles = e.dataTransfer.files; // the files that were dropped
                    showFiles( droppedFiles );

                                    });
            }


            // if the form was submitted
            form.addEventListener( 'submit', function( e )
            {
                // preventing the duplicate submissions if the current one is in progress
                if( form.classList.contains( 'is-uploading' ) ) return false;

                form.classList.add( 'is-uploading' );
                form.classList.remove( 'is-error' );

                if( isAdvancedUpload ) // ajax file upload for modern browsers
                {
                    e.preventDefault();

                    // gathering the form data
                    var ajaxData = new FormData( form );
                    if( droppedFiles )
                    {
                        Array.prototype.forEach.call( droppedFiles, function( file )
                        {
                            ajaxData.append( input.getAttribute( 'name' ), file );
                        });
                    }

                    // ajax request
                    var ajax = new XMLHttpRequest();
                    ajax.open( form.getAttribute( 'method' ), form.getAttribute( 'action' ), true );

                    ajax.onload = function()
                    {
                        form.classList.remove( 'is-uploading' );
                        if( ajax.status >= 200 && ajax.status < 400 )
                        {
                            var data = JSON.parse( ajax.responseText );

                            //console.log(ajax.status);
                            //console.log(data);
                            //console.log( data.success == true);

                            form.classList.add( data.success == true ? 'is-success' : 'is-error' );
                            if( data.success ) {
                                console.log('redraw called');
                                redrawImage();
                            }
                            if( !data.success ) errorMsg.textContent = data.error;
                        }
                        else alert( 'Error. Please, contact the webmaster!' );
                    };

                    ajax.onerror = function()
                    {
                        form.classList.remove( 'is-uploading' );
                        alert( 'Error. Please, try again!' );
                    };

                    ajax.send( ajaxData );
                }
                else // fallback Ajax solution upload for older browsers
                {
                    var iframeName	= 'uploadiframe' + new Date().getTime(),
                        iframe		= document.createElement( 'iframe' );

                        $iframe		= $( '<iframe name="' + iframeName + '" style="display: none;"></iframe>' );

                    iframe.setAttribute( 'name', iframeName );
                    iframe.style.display = 'none';

                    document.body.appendChild( iframe );
                    form.setAttribute( 'target', iframeName );

                    iframe.addEventListener( 'load', function()
                    {
                        var data = JSON.parse( iframe.contentDocument.body.innerHTML );
                        form.classList.remove( 'is-uploading' )
                        form.classList.add( data.success == true ? 'is-success' : 'is-error' )
                        form.removeAttribute( 'target' );
                        if( !data.success ) errorMsg.textContent = data.error;
                        iframe.parentNode.removeChild( iframe );
                    });
                }
            });


            // restart the form if has a state of error/success
            Array.prototype.forEach.call( restart, function( entry )
            {
                entry.addEventListener( 'click', function( e )
                {
                    e.preventDefault();
                    form.classList.remove( 'is-error', 'is-success' );
                    input.click();
                });
            });

            // Firefox focus bug fix for file input
            input.addEventListener( 'focus', function(){ input.classList.add( 'has-focus' ); });
            input.addEventListener( 'blur', function(){ input.classList.remove( 'has-focus' ); });

        });
    }( document, window, 0 ));

</script>

<script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.5.0/js/bootstrap4-toggle.min.js"></script>

<script>
    var nodeTypes = Object.freeze({ "root": 1, "newOrder": 2, "section": 3, "product": 4, "confirmOrder": 5, "input": 6, "sendOrder": 7 });
    var nodeTypeStringArray = ["root", "newOrder", "section", "product", "confirmOrder", "input", "sendOrder"];
    var zachem = { "root": 1, "newOrder": 2, "section": 3, "product": 4, "confirmOrder": 5, "input": 6, "sendOrder": 7 };
    var sectionScrollingMethodEnum = Object.freeze({ "sendingAll": 1, "sendingOnlySelected": 2 })


    class NodeParams {
        constructor() {
            this.file = null;
            this.message = "(write message here)";
            console.log("NodeParams created!");
        }
    }
        

    class CollectionNodeParams extends NodeParams {
        constructor() {
            super();
            this.scrollingMethod = sectionScrollingMethodEnum.sendingAll;
            console.log("CollectionNodeParams created!");
        }
    }

    class SendOrderParams extends NodeParams {
        constructor() {
            super();
            this.message = '✅ Отлично! Ваш заказ был отправлен владельцу бота на обработку. 📋➡️🤖';
        }
    }


    class InputNodeParams extends NodeParams {
        constructor() {
            super();
            this.answerIsRequired = true;
        
            this.expectedResponseFormat = [];
            this.expectedResponseFormat.push(new MyStubExpectedResponceFormat('Text'        , true));
            this.expectedResponseFormat.push(new MyStubExpectedResponceFormat('Time_HH___MM'  , false));
            this.expectedResponseFormat.push(new MyStubExpectedResponceFormat('Time_HH_MM'  , false));
            this.expectedResponseFormat.push(new MyStubExpectedResponceFormat('Video'       , false));
            this.expectedResponseFormat.push(new MyStubExpectedResponceFormat('Image'       , false));
            this.expectedResponseFormat.push(new MyStubExpectedResponceFormat('Document'    , false));
            this.expectedResponseFormat.push(new MyStubExpectedResponceFormat('Audio'       , false));
          
            

            this.message = "Будьте добры указать комментарий ➕ 📚."+
            "Например: Доставьте пиццу холодной, пожалуйста.";

            
        }
    }

    class MyStubExpectedResponceFormat {
        constructor(nameOfValue, value) {
            
            if (typeof (nameOfValue) != "string" || typeof (value) != "boolean") {
                throw new Error();
            }
            this.nameOfValue = nameOfValue;
            this.value = value;

        }
    }
    class ProductNodeParams extends NodeParams {
        constructor() {
            super();

            
                            
            this._productId = Date.now();

            this.message = "Добавьте краткое описание";
            this.fullDescription = "Добавьте полное описание";

            this.characteristics = [];

            this.characteristics[0] = new Characteristic('Размер', ['20 см', '30 см', '40 см']);
            this.characteristics[1] = new Characteristic('Начинка борта', ['Хот-дог', 'Филадельфия', 'Обычный']);
            this.characteristics[2] = new Characteristic('Характ-ка', ['значение1', 'значение2', 'значение3']);

            this.prices= [];

            console.log("ProductNodeParams created!");
        }
    }

    class Characteristic
    {
        constructor(characteristicName, arrOfValues) {
            this.characteristicName = characteristicName;
            this.arrOfValues = arrOfValues;            
        }
    }

    class MyStubStr {
        constructor(countOfValues) {
            this.countOfValues = countOfValues;
            
        }

        getStrHtml(index, tuple, price) {
            if (tuple.length != this.countOfValues) {
                throw new Error();
            }
            var valuesStrHtml = '';
            for (var i = 0; i < this.countOfValues; i++) {
                valuesStrHtml += this._getValueStrHtml(tuple[i]);
            }
            var str =
                '<tr class="priceRow" style="display: table-row;" >'
                + this._getIndexStrHtml(index)
                + valuesStrHtml
                + this._getPriceStrHtml(price) 
                + '</tr >';
            return str;
        }

        _getValueStrHtml(value) {
            return '<td class="value" > ' + value + '</td > ';
        }

        _getIndexStrHtml(index) {
            return '<th class="index" scope="row">'+index+'</th>' ;
        }

        _getPriceStrHtml(price) {
            return '<td class="price" > <textarea class="myDichTextareaPrice h5 form-control z-depth-1 myDichTextarea " maxlength = "10" rows = "1 "  >' + price + '</textarea > </td > ';
        }        
    }


    var nodeTypesToParams = Object.freeze(
        {
            [nodeTypes.root]: () => new NodeParams(),
            [nodeTypes.newOrder]: () => new NodeParams(),
            [nodeTypes.section]: () => new CollectionNodeParams(),
            [nodeTypes.product]: () => new ProductNodeParams(),
            [nodeTypes.confirmOrder]: () => new NodeParams(),
            [nodeTypes.input]: () => new InputNodeParams(),
            [nodeTypes.sendOrder]: () => new SendOrderParams()
        });
</script>

<div id="container" >

    @*Кнопка "Сохранить" *@
    <button type="button" class="btn btn-labeled btn-success" onclick="saveToDb()">
        <span class="btn-label"><span class="oi oi-folder"></span></span>Сохранить
    </button>

    @* Переключатель режима  *@
    <input type="checkbox" id="lock" onchange="testCheckbox()" checked data-toggle="toggle" data-on="<span class='oi oi-lock-locked'></span>" data-off="<span class='oi oi-lock-unlocked'></span>" data-onstyle="success" data-offstyle="danger">

    @* Switch Автосохрение *@
    <div class="row rounded border border-info justify-content-md-center align-items-center m-2" style="width:500px;">
        <div class="col-7">
            <div class="h2">Автосохранение:</div>
        </div>
        <div class="col-5">
            <input  type="checkbox" checked data-toggle="toggle" data-on="Включено" data-off="Выключено" data-onstyle="success" data-offstyle="danger">
        </div>
    </div>

    @*Кнопка для отладки *@
    <button type="button" class="btn btn-labeled btn-outline-secondary" onclick="showNodes()">
        <span class="btn-label"><span class="oi oi-question-mark"></span></span>Шо там?
    </button>

    @* Таблица с стандартным набором узлов *@
    <table border="1" class="standardSet">

        <caption style="caption-side:top;text-align:center" class="unselectable">Стандартные модули</caption>

        <tr>
            <td>
                <div class="holder">
                    <div class="box" style="background-color:blue; border-radius:5px; position:relative;" draggable="true" nodeType="root">


                        <div style="top: 12px;left: 18px;position: absolute;margin-right:43px;" class="unselectable nameOfNodeDiv">
                            <h5 id="h5Test11414" style="color:white;white-space: normal;" class="nameOfNodeH">Корень</h5>
                        </div>

                        <div style="bottom: 0;left: 20px;position: absolute;" class="unselectable">
                            <p style="color:white; font-style:italic;opacity:0.5;">Корень</p>
                        </div>
                        <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position:absolute; bottom:0; right:0; " draggable="false">
                            <button class="btn btn-outline-primary btn-circle btn-circle-sm m-1 settingMy" data-toggle="modal" data-target="#modalEditNodeStandardButton">
                                <span class="oi oi-wrench"></span>
                            </button>
                            <button class="btn btn-outline-danger btn-circle btn-circle-sm m-1 trashMy" data-toggle="modal" data-target="#exampleModal">
                                <span class="oi oi-trash"></span>
                            </button>
                            <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                <span class="oi oi-info"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </td>
            <td>
                <div class="holder">
                    <div class="box" style="background-color:cornflowerblue; border-radius:5px;" draggable="true" nodeType="newOrder">

                        <div style="top: 12px;left: 18px;position: absolute;margin-right:43px;" class="unselectable nameOfNodeDiv">
                            <h5 id="h5Test11414" style="color:white;white-space: normal;" class="nameOfNodeH">Новый заказ</h5>
                        </div>


                        <div style="bottom: 0;left: 20px;position: absolute;" class="unselectable">
                            <p style="color:white; font-style:italic;opacity:0.5;">Новый заказ</p>
                        </div>

                        <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position:absolute; bottom:0; right:0; " draggable="false">
                            <button class="btn btn-outline-primary btn-circle btn-circle-sm m-1 settingMy" data-toggle="modal" data-target="#modalEditNodeStandardButton">
                                <span class="oi oi-wrench"></span>
                            </button>
                            <button class="btn btn-outline-danger btn-circle btn-circle-sm m-1 trashMy" data-toggle="modal" data-target="#exampleModal">
                                <span class="oi oi-trash"></span>
                            </button>
                            <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                <span class="oi oi-info"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </td>

            <td>
                <div class="holder">
                    <div class="box" style="background-color:orange; border-radius:5px;" draggable="true" nodeType="section">

                        <div style="top: 12px;left: 18px;position: absolute;margin-right:43px;" class="unselectable nameOfNodeDiv">
                            <h5 id="h5Test11414" style="color:white;white-space: normal;" class="nameOfNodeH">Раздел</h5>
                        </div>


                        <div style="bottom: 0;left: 20px;position: absolute;" class="unselectable">
                            <p style="color:white; font-style:italic;opacity:0.5;">Раздел</p>
                        </div>


                        <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position:absolute; bottom:0; right:0; " draggable="false">
                            <button class="btn btn-outline-primary btn-circle btn-circle-sm m-1 settingMy" data-toggle="modal" data-target="#modalEditNodeSection">
                                <span class="oi oi-wrench"></span>
                            </button>
                            <button class="btn btn-outline-danger btn-circle btn-circle-sm m-1 trashMy" data-toggle="modal" data-target="#exampleModal">
                                <span class="oi oi-trash"></span>
                            </button>
                            <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                <span class="oi oi-info"></span>
                            </button>
                        </div>

                    </div>
                </div>
            </td>

            <td>
                <div class="holder">
                    <div class="box" style="background-color:green; border-radius:5px;" draggable="true" nodeType="product">

                        <div style="top: 12px;left: 18px;position: absolute;margin-right:43px;" class="unselectable nameOfNodeDiv">
                            <h5 id="h5Test11414" style="color:white;white-space: normal;" class="nameOfNodeH">Товар</h5>
                        </div>


                        <div style="bottom: 0;left: 20px;position: absolute;" class="unselectable">
                            <p style="color:white; font-style:italic;opacity:0.5;">Товар</p>
                        </div>

                        <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position:absolute; bottom:0; right:0; " draggable="false">
                            <button class="btn btn-outline-primary btn-circle btn-circle-sm m-1 settingMy" data-toggle="modal" data-target="#modalEditNodeProduct">
                                <span class="oi oi-wrench"></span>
                            </button>
                            <button class="btn btn-outline-danger btn-circle btn-circle-sm m-1 trashMy" data-toggle="modal" data-target="#exampleModal">
                                <span class="oi oi-trash"></span>
                            </button>
                            <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                <span class="oi oi-info"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </td>

            <td>
                <div class="holder">
                    <div class="box" style="background-color:deepskyblue; border-radius:5px;" draggable="true" nodeType="confirmOrder">

                        <div style="top: 12px;left: 18px;position: absolute;margin-right:43px;" class="unselectable nameOfNodeDiv">
                            <h5 id="h5Test11414" style="color:white;white-space: normal;" class="nameOfNodeH">Подтвердить заказ</h5>
                        </div>

                        <div style="bottom: 0;left: 20px;position: absolute;" class="unselectable">
                            <p style="color:white; font-style:italic;opacity:0.5;">Подтвердить заказ</p>
                        </div>

                        <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position:absolute; bottom:0; right:0; " draggable="false">
                            <button class="btn btn-outline-primary btn-circle btn-circle-sm m-1 settingMy" data-toggle="modal" data-target="#modalEditNodeStandardButton">
                                <span class="oi oi-wrench"></span>
                            </button>
                            <button class="btn btn-outline-danger btn-circle btn-circle-sm m-1 trashMy" data-toggle="modal" data-target="#exampleModal">
                                <span class="oi oi-trash"></span>
                            </button>
                            <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                <span class="oi oi-info"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </td>
            <td>
                <div class="holder">
                    <div class="box" style="background-color:darkslateblue; border-radius:5px; position:relative;" draggable="true" nodeType="input">

                        <div style="top: 12px;left: 18px;position: absolute;margin-right:43px;" class="unselectable nameOfNodeDiv">
                            <h5 id="h5Test11414" style="color:white;white-space: normal;" class="nameOfNodeH">Ввод данных</h5>
                        </div>


                        <div style="bottom: 0;left: 20px;position: absolute;" class="unselectable">
                            <p style="color:white; font-style:italic;opacity:0.5;">Ввод данных</p>
                        </div>

                        <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position:absolute; bottom:0; right:0; " draggable="false">
                            <button class="btn btn-outline-primary btn-circle btn-circle-sm m-1 settingMy" data-toggle="modal" data-target="#modalEditNodeInput">
                                <span class="oi oi-wrench"></span>
                            </button>
                            <button class="btn btn-outline-danger btn-circle btn-circle-sm m-1 trashMy" data-toggle="modal" data-target="#exampleModal">
                                <span class="oi oi-trash"></span>
                            </button>
                            <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                <span class="oi oi-info"></span>
                            </button>
                        </div>

                    </div>
                </div>
            </td>
            <td>
                <div class="holder">
                    <div class="box" style="background-color:blueviolet; border-radius:5px;" draggable="true" nodeType="sendOrder">

                        <div style="top: 12px;left: 18px;position: absolute;margin-right:43px;" class="unselectable nameOfNodeDiv">
                            <h5 id="h5Test11414" style="color:white;white-space: normal;" class="nameOfNodeH">Отправить заказ</h5>
                        </div>


                        <div style="bottom: 0;left: 20px;position: absolute;" class="unselectable">
                            <p style="color:white; font-style:italic;opacity:0.5;">Отправить заказ</p>
                        </div>

                        <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position:absolute; bottom:0; right:0; " draggable="false">
                            <button class="btn btn-outline-primary btn-circle btn-circle-sm m-1 settingMy" data-toggle="modal" data-target="#modalEditNodeSendOrder">
                                <span class="oi oi-wrench"></span>
                            </button>
                            <button class="btn btn-outline-danger btn-circle btn-circle-sm m-1 trashMy" data-toggle="modal" data-target="#exampleModal">
                                <span class="oi oi-trash"></span>
                            </button>
                            <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                <span class="oi oi-info"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </td>

        </tr>

    </table>

    <br>

    @* Таблица с разметкой *@
    <table id="tableMarkup" border="1">

        @{
            for (int y = 0; y < yMax; y++)
            {
                @* Добавляет строку для подсказок при вставке *@
                if (y != 0)
                {
                    <tr class="hintRow" style="visibility:hidden;" id="hint_@(y-1)">
                        @* Пустая ячека в колонке с кнопками сворачивания раздела *@
                        <td></td>
                        @for (int k = 0; k < xMax; k++)
                        {
                            <td id="hint_@(k)_@(y)"></td>
                        }
                    </tr>
                }


                <tr>
                    @* Кнопка для сворачивания раздела *@
                    <td class="fold">
                        <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1" onclick="foldButtonPressed()">
                            <span class="oi oi-caret-bottom"></span>
                        </button>
                    </td>

                    @for (int x = 0; x < xMax; x++)
                    {
                        bool isHideNeeded = false;
                        string hideString = "";

                        int xVisible = (ViewData["xVisible"] as int?) ?? default(int);
                        int yVisible = (ViewData["yVisible"] as int?) ?? default(int);

                        if (x >= xVisible || y >= yVisible)
                        {
                            isHideNeeded = true;
                            hideString = "style= visibility:hidden;";
                        }

                        <td id="@(x)_@(y)" @hideString>
                            <div class="holder">
                                @if (x == 0 && y == 0)
                                {

                                }
                            </div>
                        </td>
                    }
                </tr>
            }
        }




    </table>

    @* Модальное окно для редактирования отправки*@
    <div class="modal fade bd-example-modal-lg" id="modalEditNodeSendOrder" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                <div class="modal-header" style="height:80px;">

                    <h2 id="h5Test5" class="modal-title h2" style="top: 0;left: 0;right: 0;bottom: 0;cursor:pointer;">/*Название узла*/</h2>

                    <div class="form-group shadow-textarea">
                        <textarea id="textareaTest5" class=" h2 form-control z-depth-1" maxlength="30"
                                  style=" white-space: nowrap;display:none;padding:0; font-size: 2rem;margin:0;
                                height:50px; resize: none; width:600px;" rows="1 " placeholder="placeholder">Спасите памагити</textarea>
                    </div>



                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>

                </div>

                <div class="modal-body ">

                    <div class="modal-content text-break p-2 " style="margin-bottom:1rem;margin-right:1rem;">

                        <div class=" modal-title">
                            <h2 class="modal-title h4 m-1" id="myLargeModalLabel">Куда присылать заказы?</h2>
                        </div>

                        <div class="m-3 unselectable">

                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="customCheck1" checked disabled>
                                <label class="custom-control-label" for="customCheck1">Во вкладку "Заказы"</label>
                            </div>


                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="customCheck2" disabled>
                                <label class="custom-control-label" for="customCheck2">На мой телеграм</label>
                            </div>


                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="customCheck3" disabled>
                                <label class="custom-control-label" for="customCheck3">На почту</label>
                            </div>

                            <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position:absolute; bottom:0; right:0; " draggable="false">
                                <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                    <span class="oi oi-info"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="modal-content text-break p-2 " style="margin-bottom:1rem;margin-right:1rem;">

                        <div class=" modal-title">
                            <h2 class="modal-title h4 m-1" id="myLargeModalLabel">Краткое описание</h2>
                        </div>

                        <div class="m-3 ">


                            <div class="form-group" style="position:relative;margin-bottom:35px;">
                                <textarea class="form-control" id="sendOrderDescriptionTextarea" rows="7">✅ Отлично! Ваш заказ был отправлен владельцу бота на обработку. 📋➡️🤖</textarea>
                            </div>

                            <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position :absolute; bottom:0; right:0; " draggable="false">
                                <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                    <span class="oi oi-info"></span>
                                </button>
                            </div>

                        </div>


                    </div>
                                       
                </div>

                <script>

                    function togleTextarea5() {
                        if ($('#h5Test5').css('display') != 'none') {
                            $('#h5Test5').css('display', 'none');
                            $('#textareaTest5').css('display', 'block');
                            $('#textareaTest5').focus();
                        } else {
                            $('#h5Test5').css('display', 'block');
                            $('#textareaTest5').css('display', 'none');
                        }
                    }


                    $('#textareaTest5').focusout(function () {
                        var newNameOfNode = $('#textareaTest5').val();
                        $('#h5Test5').text(newNameOfNode);

                        console.log("2HtmlController.pressedButton =" + HtmlController.pressedButton);
                        var closestBox = HtmlController.pressedButton.closest('.box')

                        if (closestBox.parents('.standardSet').length == 0) {
                            closestBox.children('.nameOfNodeDiv').children('.nameOfNodeH').text(newNameOfNode);
                            var TdId = closestBox.closest('td').attr('id');
                            var coord = get_x_y_fromTdId(TdId);
                            TableController.matrix[coord.x][coord.y].nodeName = newNameOfNode;
                        } else {
                            console.log("попытка изменить название узла из стандартного набора");
                        }



                        togleTextarea5();
                    });

                    $('#h5Test5').click(function () {
                        $('#textareaTest5').val($('#h5Test5').text());
                        togleTextarea5();
                    });


                </script>
            </div>
        </div>
    </div>

    @* Модальное окно для редактирования товара *@
    <div class="modal fade bd-example-modal-lg" id="modalEditNodeProduct" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                @* Хэдер *@
                <div class="modal-header" style="height:80px;">

                    <h2 id="h5Test4" class="modal-title h2" style="top: 0;left: 0;right: 0;bottom: 0;cursor:pointer;">/*Название узла*/</h2>

                    <div class="form-group shadow-textarea">
                        <textarea id="textareaTest4" class=" h2 form-control z-depth-1" maxlength="30"
                                  style=" white-space: nowrap;display:none;padding:0; font-size: 2rem;margin:0;
                                height:50px; resize: none; width:600px;" rows="1 " placeholder="placeholder">Спасите памагити</textarea>
                    </div>



                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>

                </div>

                @* Тело  *@
                <div class="modal-body ">

                    @* Краткое описание *@
                    <div class="modal-content text-break p-2 " style="margin-bottom:1rem;margin-right:1rem;">

                        <div class=" modal-title">
                            <h2 class="modal-title h4 m-1">Краткое описание</h2>
                        </div>

                        <div class="m-3 ">


                            <div class="form-group" style="position:relative;margin-bottom:30px;">
                                <textarea class="form-control" id="shortDescriptionProduct" rows="2" maxlength="60">этот товар состоит из того-то и того-то, особенно хорош тем-то и тем-то. отвечаю</textarea>
                            </div>

                            <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position :absolute; bottom:0; right:0; " draggable="false">
                                <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                    <span class="oi oi-info"></span>
                                </button>
                            </div>

                        </div>
                    </div>

                    @* Полное описание *@
                    <div class="modal-content text-break p-2 " style="margin-bottom:1rem;margin-right:1rem;">

                        <div class=" modal-title">
                            <h2 class="modal-title h4 m-1" id="myLargeModalLabel">Полное описание</h2>
                        </div>

                        <div class="m-3 ">


                            <div class="form-group" style="position:relative;margin-bottom:30px;">
                                <textarea class="form-control" id="fullDescriptionProduct" rows="7" maxlength="250">
этот товар состоит из того-то и того-то, особенно хорош тем-то и тем-то. отвечаю
этот товар состоит из того-то и того-то, особенно хорош тем-то и тем-то. отвечаю</textarea>
                            </div>

                            <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position :absolute; bottom:0; right:0; " draggable="false">
                                <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                    <span class="oi oi-info"></span>
                                </button>
                            </div>

                        </div>
                    </div>

                    @* DragAndDrop  *@
                    <div class="modal-content" style="margin-bottom:1rem;margin-right:1rem;">
                        <div class=" js">

                            <div class="containerDragAndDrop " role="main">
                                <form id="formSendImageProduct" method="post" asp-controller="BotForSalesEditing" asp-action="SetImage" enctype="multipart/form-data" novalidate class="boxDragAndDrop">

                                    <div class="box__input">
                                        <svg class="box__icon" xmlns="http://www.w3.org/2000/svg" width="50" height="43" viewBox="0 0 50 43"><path d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z" /></svg>
                                        <input type="file" name="uploadedFile" id="file" class="box__file" data-multiple-caption="{count} files selected" multiple />
                                        <label for="file"><strong>Choose a file</strong><span class="box__dragndrop"> or drag it here</span>.</label>
                                        <button type="submit" class="box__button">Upload</button>
                                    </div>


                                    <div class="box__uploading">Uploading&hellip;</div>
                                    <div class="box__success">Done! <a href="https://css-tricks.com/examples/DragAndDropFileUploading//?submit-on-demand" class="box__restart" role="button">Upload more?</a></div>
                                    <div class="box__error">Error! <span></span>. <a href="https://css-tricks.com/examples/DragAndDropFileUploading//?submit-on-demand" class="box__restart" role="button">Try again!</a></div>
                                </form>

                            </div>

                        </div>
                    </div>



                    <div class="modal-content text-break p-2 " style="margin-bottom:1rem;margin-right:1rem;">

                        <div class=" modal-title">
                            <h2 class="modal-title h4 m-1">Картинка</h2>
                        </div>

                        <div class="m-3 ">

                            @* Превью картинки *@
                            <div class="modal-content mb-3">
                                <div class="row no-gutters">
                                    <div class="col-md-4">
                                        @* Картинка *@
                                        <div>

                                            <a id="stretchedLinkProductImage"  asp-controller="Test2" asp-action="GetLatestImage" class="stretched-link"></a>
                                            <div class="rounded" style="border:groove;">
                                                <h2 id="noImage" style="display:none;">No image</h2>
                                                <div id="divImageHolder" style="width:200px;height:200px;">

                                                </div>
                                            </div>
                                        </div>
                                        <script>

                                            var displayImage = function (base64Data) {
                                                var imag = "<img style= \"border-style: solid;     width: 200px ;   \""
                                                    + "src='" + "data:image/jpeg;base64,"
                                                    + base64Data + "'/>";
                                                $("#divImageHolder").html(imag)
                                            };
                                            function redrawImage() {

                                                var url_string = window.location.href;
                                                var url = new URL(url_string);
                                                var botId = url.searchParams.get("botId");
                                                var productId = TableController.editableProduct.nodeParams._productId;

                                                drawImage(botId, productId);
                                            }
                                            function drawImage(botId, productId) {


                                                var url = `/BotForSalesEditing/GetImage?botId=${botId}&productId=${productId}`

                                                $.ajax({
                                                    cache: false,
                                                    type: "GET",
                                                    url: url,
                                                    contentType: 'application/json',
                                                    success: function (data) {
                                                        $('#noImage').css('display', 'none');
                                                        
                                                        var imgs = data;

                                                        displayImage(imgs.base64imgage);
                                                    },
                                                    error: function (xhr) {
                                                        //alert("Error occurred while loading the image. "
                                                        //    + xhr.responseText);
                                                        console.log("Error occurred while loading the image. "
                                                            + xhr.responseText);
                                                        $('#noImage').css('display', 'block');
                                                        $("#divImageHolder").html('');
                                                        
                                                    }
                                                });

                                            }
                                        </script>
                                    </div>
                                    <div class="col-md-8">
                                        <div class="card-body">
                                            <h5 class="card-title">Card title</h5>
                                            <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
                                            <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position :absolute; bottom:0; right:0; " draggable="false">
                                <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                    <span class="oi oi-info"></span>
                                </button>
                            </div>

                        </div>
                    </div>


                    @* Превью картинки 
                    <div class="modal-content mb-3">
                        <div class="row no-gutters">
                            <div class="col-md-4">
                                

                                <div id="divImageHolder"></div>
                                <script>
                                                var displayImage = function (base64Data) {
                                                    var imag = "<img style= \"border-style: solid;     width: 200px;\""
                                                        + "src='" + "data:image/jpeg;base64,"
                                                        + base64Data + "'/>";
                                                    $("#divImageHolder").html(imag)
                                                };



                                                $.ajax({
                                                    cache: false,
                                                    type: "GET",
                                                    url: "@Url.Action("GetImage","Test2")",
                                                    contentType: 'application/json',
                                                    //dataType: "json",
                                                    success: function (data) {
                                                        var imgs = data;
                                                        displayImage(imgs.base64imgage);
                                                    },
                                                    error: function (xhr) {
                                                        alert("Error occurred while loading the image. "
                                                            + xhr.responseText);
                                                    }
                                                });
                                    </script>
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">Card title</h5>
                                    <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
                                    <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
                                </div>
                            </div>
                        </div>
                    </div>
                        *@

                    @*
                        <div class="modal-content mb-3">
                            <div class="row no-gutters">
                                <div class="col-md-4">


                                    <div id="divImageHolder"></div>
                                    <script>
                                                var displayImage = function (base64Data) {
                                                    var imag = "<img style= \"border-style: solid;     width: 200px;\""
                                                        + "src='" + "data:image/jpeg;base64,"
                                                        + base64Data + "'/>";
                                                    $("#divImageHolder").html(imag)
                                                };



                                                $.ajax({
                                                    cache: false,
                                                    type: "GET",
                                                    url: "@Url.Action("GetImage","Test2")",
                                                    contentType: 'application/json',
                                                    //dataType: "json",
                                                    success: function (data) {
                                                        var imgs = data;
                                                        displayImage(imgs.base64imgage);
                                                    },
                                                    error: function (xhr) {
                                                        alert("Error occurred while loading the image. "
                                                            + xhr.responseText);
                                                    }
                                                });
                                    </script>
                                </div>
                                <div class="col-md-8">
                                    <div class="card-body">
                                        <h5 class="card-title">Card title</h5>
                                        <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
                                        <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
                                    </div>
                                </div>
                            </div>
                        </div>*@

                    @* Ссылка на картинку *@
                    <div class="modal-content" style="margin-bottom:1rem;margin-right:1rem;">
                        <a asp-controller="Test2" asp-action="GetLatestImage" class="badge badge-primary">Смотреть картинку</a>
                    </div>

                    @* Характеристики товара *@
                    <div class="modal-content p-2" style="margin-bottom:1rem;margin-right:1rem;">

                        <div class=" modal-title">
                            <h2 class="modal-title h4 m-1" id="myLargeModalLabel">Характеристики товара</h2>
                        </div>

                        <div class="card-deck p-3 " id="charsDeck">


                            @* Необходимая карточка. По ёё шаблону создаются все остальные карточки*@
                            <div class="m-1 charCard" style="display:none;" id="charTemp">
                                <div class="card  border-primary " style="width: 13rem; padding:1rem;">
                                    <div class=" modal-title">
                                        <div class="form-group shadow-textarea  ">
                                            <textarea class=" modal-title h4 form-control z-depth-1 textareaTitleMy" maxlength="20" style=" white-space: nowrap;padding:0; margin:0;font-size: 1.5rem;height:50px; resize: none; width:180px;  position :relative;" rows="1 " placeholder="placeholder">Название</textarea>
                                        </div>
                                    </div>

                                    <div class="form-group shadow-textarea ">
                                        <textarea class=" h5 form-control z-depth-1 textareaMy" maxlength="20"
                                                  style=" white-space: nowrap;padding:0; margin:0;
                                height:26px; resize: none; width:180px;  position :relative;" rows="1 " placeholder="placeholder">Что-нибудь 1</textarea>
                                    </div>

                                    <div class="form-group shadow-textarea ">
                                        <textarea class=" h5 form-control z-depth-1 textareaMy" maxlength="20"
                                                  style=" white-space: nowrap;padding:0; margin:0;
                                height:26px; resize: none; width:180px;  position :relative;" rows="1 " placeholder="placeholder">Что-нибудь 2</textarea>
                                    </div>

                                    <div class="form-group shadow-textarea ">
                                        <textarea class=" h5 form-control z-depth-1 textareaMy" maxlength="20"
                                                  style=" white-space: nowrap;padding:0; margin:0;
                                height:26px; resize: none; width:180px; position :relative; " rows="1 " placeholder="placeholder;">Что-нибудь 3</textarea>
                                    </div>

                                    <div style=" border-radius:5px; position: relative;align-self: center;  " draggable="false">
                                        <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                            <span class="oi oi-plus"></span>
                                        </button>
                                        <button class="btn btn-outline-danger btn-circle btn-circle-sm m-1 deleteCard">
                                            <span class="oi oi-trash"></span>
                                        </button>
                                    </div>

                                </div>
                            </div>

                            @* Окошко для создания новой характеристики*@
                            <div class="m-1" id="createChar">
                                <div class="card  border-secondary " style="width: 13rem;height:16.5rem; padding:1rem;cursor:pointer;" onclick="createNewProductCharacteristic()">
                                    <div style=" border-radius:5px; position: relative;align-self: center;line-height: 13em;   " draggable="false">
                                        <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                            <span class="oi oi-plus"></span>
                                        </button>

                                    </div>

                                </div>
                            </div>

                        </div>


                        <div style=" border-radius:5px; display: inline-block; margin:5px; position :absolute; bottom:0; right:0; " draggable="false">
                            <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                <span class="oi oi-info"></span>
                            </button>
                        </div>


                    </div>

                    @* Цены *@
                    <div class="modal-content p-2" style="margin-bottom:1rem;margin-right:1rem;">

                        <div class=" modal-title">
                            <h2 class="modal-title h4 m-1" id="myLargeModalLabel">Цены</h2>
                        </div>


                        <table class="table table-hover table-sm ">

                            <thead>
                                <tr class="titleTableBody">
                                    <th scope="col">#</th>
                                    <th class="valueTitleMy" scope="col">Тип борта</th>
                                    <th class="valueTitleMy" scope="col">Размер</th>
                                    <th class="valueTitleMy" scope="col" style="display:none;">Размер</th>
                                    <th class="priceTitleMy" scope="col">Цена</th>
                                </tr>
                            </thead>

                            <tbody class="priceTableBody">
                                <tr class="priceRow">
                                    <th scope="row">1</th>
                                    <td>Обычный</td>
                                    <td>20см</td>
                                    <td>
                                        <textarea class=" h5 form-control z-depth-1 myDichTextarea" maxlength="10" rows="1 " placeholder="placeholder">123456 грн</textarea>
                                    </td>
                                </tr>
                                <tr class="priceRow">
                                    <th scope="row">2</th>
                                    <td>Обычный</td>
                                    <td>30см</td>
                                    <td>
                                        <textarea class=" h5 form-control z-depth-1 myDichTextarea" maxlength="10" rows="1 " placeholder="placeholder">123456 грн</textarea>
                                    </td>
                                </tr>
                                <tr class="priceRow">
                                    <th scope="row">3</th>
                                    <td>Обычный</td>
                                    <td>40см</td>
                                    <td>
                                        <textarea class=" h5 form-control z-depth-1 myDichTextarea" maxlength="10" rows="1 " placeholder="placeholder">123456 грн</textarea>
                                    </td>
                                </tr>
                                <tr class="priceRow">
                                    <th scope="row">4</th>
                                    <td>Хот-дог</td>
                                    <td>20см</td>
                                    <td>
                                        <textarea class=" h5 form-control z-depth-1 myDichTextarea" maxlength="10" rows="1 " placeholder="placeholder">123456 грн</textarea>
                                    </td>
                                </tr>
                                <tr class="priceRow">
                                    <th scope="row">5</th>
                                    <td>Хот-дог</td>
                                    <td>30см</td>
                                    <td>
                                        <textarea class=" h5 form-control z-depth-1 myDichTextarea" maxlength="10" rows="1 " placeholder="placeholder">123456 грн</textarea>
                                    </td>
                                </tr>
                                <tr class="priceRow">
                                    <th scope="row">6</th>
                                    <td>Хот-дог</td>
                                    <td>40см</td>
                                    <td>
                                        <textarea class=" h5 form-control z-depth-1 myDichTextarea" maxlength="10" rows="1 " placeholder="placeholder">123456 грн</textarea>
                                    </td>
                                </tr>
                                <tr class="priceRow">
                                    <th scope="row">7</th>
                                    <td>Филадельфия</td>
                                    <td>20см</td>
                                    <td>
                                        <textarea class=" h5 form-control z-depth-1 myDichTextarea" maxlength="10" rows="1 " placeholder="placeholder">123456 грн</textarea>
                                    </td>
                                </tr>
                                <tr class="priceRow">
                                    <th scope="row">8</th>
                                    <td>Филадельфия</td>
                                    <td>30см</td>
                                    <td>
                                        <textarea class=" h5 form-control z-depth-1 myDichTextarea" maxlength="10" rows="1 " placeholder="placeholder">123456 грн</textarea>
                                    </td>
                                </tr>
                                <tr class="priceRow">
                                    <th scope="row">9</th>
                                    <td>Филадельфия</td>
                                    <td>40см</td>
                                    <td>
                                        <textarea class=" h5 form-control z-depth-1 myDichTextarea" maxlength="10" rows="1 " placeholder="placeholder">123456 грн</textarea>
                                    </td>
                                </tr>

                                <tr class="priceRow" id="priceRowTemplate" style="display:none;">
                                    <th class="index" scope="row">1</th>
                                    <td class="value">Обычный</td>
                                    <td class="price">
                                        <textarea class=" h5 form-control z-depth-1 myDichTextarea myDichTextareaPrice" maxlength="10" rows="1 ">123456 грн</textarea>
                                    </td>
                                </tr>


                            </tbody>

                        </table>

                        <div style=" border-radius:5px; display: inline-block; margin:5px; position :absolute; bottom:0; right:0; " draggable="false">
                            <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                <span class="oi oi-info"></span>
                            </button>
                        </div>
                    </div>



                </div>

                @* Бесполезный код для отлавливания нажатий на строку с названием *@
                <script>

                    function togleTextarea4() {
                        if ($('#h5Test4').css('display') != 'none') {
                            $('#h5Test4').css('display', 'none');
                            $('#textareaTest4').css('display', 'block');
                            $('#textareaTest4').focus();
                        } else {
                            $('#h5Test4').css('display', 'block');
                            $('#textareaTest4').css('display', 'none');
                        }
                    }


                    $('#textareaTest4').focusout(function () {
                        var newNameOfNode = $('#textareaTest4').val();
                        $('#h5Test4').text(newNameOfNode);

                        console.log("2HtmlController.pressedButton =" + HtmlController.pressedButton);
                        var closestBox = HtmlController.pressedButton.closest('.box')

                        if (closestBox.parents('.standardSet').length == 0) {
                            closestBox.children('.nameOfNodeDiv').children('.nameOfNodeH').text(newNameOfNode);
                            var TdId = closestBox.closest('td').attr('id');
                            var coord = get_x_y_fromTdId(TdId);
                            TableController.matrix[coord.x][coord.y].nodeName = newNameOfNode;
                        } else {
                            console.log("попытка изменить название узла из стандартного набора");
                        }



                        togleTextarea4();
                    });

                    $('#h5Test4').click(function () {
                        $('#textareaTest4').val($('#h5Test4').text());
                        togleTextarea4();
                    });


                </script>

            </div>
        </div>
    </div>

    @* Модальное окно для редактирования инпута *@
    <div class="modal fade bd-example-modal-lg" id="modalEditNodeInput" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                <div class="modal-header" style="height:80px;">

                    <h2 id="h5Test3" class="modal-title h2" style="top: 0;left: 0;right: 0;bottom: 0;cursor:pointer;">/*Название узла*/</h2>

                    <div class="form-group shadow-textarea">
                        <textarea id="textareaTest3" class=" h2 form-control z-depth-1" maxlength="30"
                                  style=" white-space: nowrap;display:none;padding:0; font-size: 2rem;margin:0;
                                height:50px; resize: none; width:600px;" rows="1 " placeholder="placeholder">Спасите памагити</textarea>
                    </div>



                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>

                </div>
                <div class="modal-body ">

                    <div class="modal-content text-break p-2 " style="margin-bottom:1rem;margin-right:1rem;">

                        <div class=" modal-title">
                            <h2 class="modal-title h4 m-1" id="myLargeModalLabel">Ответ обязателен?</h2>
                        </div>

                        <div class="m-3 unselectable">

                            <div class="custom-control custom-radio">
                                <input type="radio" class="custom-control-input" id="answerIsRequired" name="defaultExampleRadios">
                                <label class="custom-control-label" for="answerIsRequired">Да</label>
                            </div>

                            <div class="custom-control custom-radio">
                                <input type="radio" class="custom-control-input" id="answerIsNotRequired" name="defaultExampleRadios">
                                <label class="custom-control-label" for="answerIsNotRequired">Нет</label>
                            </div>

                            <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position:absolute; bottom:0; right:0; " draggable="false">
                                <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                    <span class="oi oi-info"></span>
                                </button>
                            </div>



                        </div>


                    </div>


                    <div class="modal-content text-break p-2 " style="margin-bottom:1rem;margin-right:1rem;">

                        <div class=" modal-title">
                            <h2 class="modal-title h4 m-1" id="myLargeModalLabel">Ожидаемый формат ответа</h2>
                        </div>

                        <div class="m-3 unselectable" id="expectedResponseFormatContainer">



                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="inputExpectedResponseFormatText" expectedResponseFormat ="Text">
                                <label class="custom-control-label" for="inputExpectedResponseFormatText">Текст</label>
                            </div>


                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="inputExpectedResponseFormatTime_HH___MM" expectedResponseFormat ="Time_HH___MM">
                                <label class="custom-control-label" for="inputExpectedResponseFormatTime_HH___MM">Время (формат HH:MM)</label>
                            </div>


                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="inputExpectedResponseFormatTime_HH_MM" expectedResponseFormat ="Time_HH_MM">
                                <label class="custom-control-label" for="inputExpectedResponseFormatTime_HH_MM">Время (формат HH MM)</label>
                            </div>



                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="inputExpectedResponseFormatVideo" expectedResponseFormat ="Video">
                                <label class="custom-control-label" for="inputExpectedResponseFormatVideo">Видео</label>
                            </div>
                                                                                    

                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="inputExpectedResponseFormatImage" expectedResponseFormat ="Image">
                                <label class="custom-control-label" for="inputExpectedResponseFormatImage">Картинка</label>
                            </div>


                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="inputExpectedResponseFormatDocument" expectedResponseFormat ="Document">
                                <label class="custom-control-label" for="inputExpectedResponseFormatDocument">Файл</label>
                            </div>

                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="inputExpectedResponseFormatAudio" expectedResponseFormat ="Audio">
                                <label class="custom-control-label" for="inputExpectedResponseFormatAudio">Аудио</label>
                            </div>



                            <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position:absolute; bottom:0; right:0; " draggable="false">
                                <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                    <span class="oi oi-info"></span>
                                </button>
                            </div>
                        </div>


                    </div>


                    <div class="modal-content text-break p-2 " style="margin-bottom:1rem;margin-right:1rem;">

                        <div class=" modal-title">
                            <h2 class="modal-title h4 m-1" id="myLargeModalLabel">Краткое описание</h2>
                        </div>

                        <div class="m-3 ">


                            <div class="form-group" style="position:relative;margin-bottom:35px;">
                                <textarea class="form-control" id="inputShortDescriptionTextarea" rows="7"></textarea>
                            </div>

                            <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position :absolute; bottom:0; right:0; " draggable="false">
                                <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                    <span class="oi oi-info"></span>
                                </button>
                            </div>

                        </div>


                    </div>



                </div>

                <script>

                    function togleTextarea3() {
                        if ($('#h5Test3').css('display') != 'none') {
                            $('#h5Test3').css('display', 'none');
                            $('#textareaTest3').css('display', 'block');
                            $('#textareaTest3').focus();
                        } else {
                            $('#h5Test3').css('display', 'block');
                            $('#textareaTest3').css('display', 'none');
                        }
                    }


                    $('#textareaTest3').focusout(function () {
                        var newNameOfNode = $('#textareaTest3').val();
                        $('#h5Test3').text(newNameOfNode);

                        console.log("2HtmlController.pressedButton =" + HtmlController.pressedButton);
                        var closestBox = HtmlController.pressedButton.closest('.box')

                        if (closestBox.parents('.standardSet').length == 0) {
                            closestBox.children('.nameOfNodeDiv').children('.nameOfNodeH').text(newNameOfNode);
                            var TdId = closestBox.closest('td').attr('id');
                            var coord = get_x_y_fromTdId(TdId);
                            TableController.matrix[coord.x][coord.y].nodeName = newNameOfNode;
                        } else {
                            console.log("попытка изменить название узла из стандартного набора");
                        }



                        togleTextarea3();
                    });

                    $('#h5Test3').click(function () {
                        $('#textareaTest3').val($('#h5Test3').text());
                        togleTextarea3();
                    });


                </script>
            </div>
        </div>
    </div>

    @* Модальное окно для редактирования раздела *@
    <div class="modal fade bd-example-modal-lg" id="modalEditNodeSection" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                <div class="modal-header" style="height:80px;">

                    <h2 id="h5Test2" class="modal-title h2" style="top: 0;left: 0;right: 0;bottom: 0;cursor:pointer;">/*Название узла*/</h2>

                    <div class="form-group shadow-textarea">
                        <textarea id="textareaTest2" class=" h2 form-control z-depth-1" maxlength="30"
                                  style=" white-space: nowrap;display:none;padding:0; font-size: 2rem;margin:0;
                                height:50px; resize: none; width:600px;" rows="1 " placeholder="placeholder">Спасите памагити</textarea>
                    </div>



                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>

                </div>
                <div class="modal-body ">

                    <div class="modal-content text-break p-2 " style="margin-bottom:1rem;margin-right:1rem;">
                        <div class=" modal-title">
                            <h2 class="modal-title h4 m-1" id="myLargeModalLabel">Способ перелистывания</h2>
                        </div>
                        <div class="m-3 unselectable">

                            <div class="custom-control custom-radio">
                                <input type="radio" class="custom-control-input" id="sendingAll" name="defaultExampleRadios">
                                <label class="custom-control-label" for="sendingAll">Отсылание всех товаров подряд</label>
                            </div>

                            <div class="custom-control custom-radio">
                                <input type="radio" class="custom-control-input" id="sendingOnlySelected" name="defaultExampleRadios">
                                <label class="custom-control-label" for="sendingOnlySelected">Отсылание только выбранных товаров</label>
                            </div>

                            <div style="background-color:white; border-radius:5px; display: inline-block; margin:5px; position:absolute; bottom:0; right:0; " draggable="false">
                                <button class="btn btn-outline-secondary btn-circle btn-circle-sm m-1">
                                    <span class="oi oi-info"></span>
                                </button>
                            </div>
                        </div>
                    </div>

                </div>

                <script>

                    function togleTextarea2() {
                        if ($('#h5Test2').css('display') != 'none') {
                            $('#h5Test2').css('display', 'none');
                            $('#textareaTest2').css('display', 'block');
                            $('#textareaTest2').focus();
                        } else {
                            $('#h5Test2').css('display', 'block');
                            $('#textareaTest2').css('display', 'none');
                        }
                    }


                    $('#textareaTest2').focusout(function () {
                        var newNameOfNode = $('#textareaTest2').val();
                        $('#h5Test2').text(newNameOfNode);

                        console.log("2HtmlController.pressedButton =" + HtmlController.pressedButton);
                        var closestBox = HtmlController.pressedButton.closest('.box')

                        if (closestBox.parents('.standardSet').length == 0) {
                            closestBox.children('.nameOfNodeDiv').children('.nameOfNodeH').text(newNameOfNode);
                            var TdId = closestBox.closest('td').attr('id');
                            var coord = get_x_y_fromTdId(TdId);
                            TableController.matrix[coord.x][coord.y].nodeName = newNameOfNode;
                        } else {
                            console.log("попытка изменить название узла из стандартного набора");
                        }



                        togleTextarea2();
                    });

                    $('#h5Test2').click(function () {
                        $('#textareaTest2').val($('#h5Test2').text());
                        togleTextarea2();
                    });


                </script>
            </div>
        </div>
    </div>

    @* Модальное окно для редактирования стандартной кнопки *@
    <div class="modal fade bd-example-modal-lg" id="modalEditNodeStandardButton" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                <div class="modal-header" style="height:80px;">

                    <h2 id="h5Test1" class="modal-title h2" style="top: 0;left: 0;right: 0;bottom: 0;cursor:pointer;">/*Название узла*/</h2>

                    <div class="form-group shadow-textarea">
                        <textarea id="textareaTest1" class=" h2 form-control z-depth-1" maxlength="30" style=" white-space: nowrap;display:none;padding:0; font-size: 2rem;margin:0;height:50px; resize: none; width:600px;" rows="1 " placeholder="placeholder">Спасите памагити</textarea>
                    </div>



                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>

                </div>
                <div class="modal-body ">
                    Тут никого нет
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" onclick="togleTextarea()">Сохранить</button>
                </div>
                <script>

                    function togleTextarea() {
                        if ($('#h5Test1').css('display') != 'none') {
                            $('#h5Test1').css('display', 'none');
                            $('#textareaTest1').css('display', 'block');
                            $('#textareaTest1').focus();
                        } else {
                            $('#h5Test1').css('display', 'block');
                            $('#textareaTest1').css('display', 'none');
                        }
                    }


                    $('#textareaTest1').focusout(function () {
                        var newNameOfNode = $('#textareaTest1').val();
                        $('#h5Test1').text(newNameOfNode);

                        //$('#h5Test11414').text($('#textareaTest1').val());
                        //HtmlController.pressedButton.closest(".nameOfNode").text(newNameOfNode);

                        console.log("2HtmlController.pressedButton =" + HtmlController.pressedButton);
                        var closestBox = HtmlController.pressedButton.closest('.box')

                        if (closestBox.parents('.standardSet').length == 0) {
                            closestBox.children('.nameOfNodeDiv').children('.nameOfNodeH').text(newNameOfNode);
                            var TdId = closestBox.closest('td').attr('id');
                            var coord = get_x_y_fromTdId(TdId);
                            TableController.matrix[coord.x][coord.y].nodeName = newNameOfNode;
                        } else {
                            console.log("попытка изменить название узла из стандартного набора");
                        }



                        togleTextarea();
                    });

                    $('#h5Test1').click(function () {
                        $('#textareaTest1').val($('#h5Test1').text());
                        togleTextarea();
                    });


                </script>
            </div>
        </div>
    </div>

    @* Модальное окно удаления узла*@
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">New message</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Вы уверены, что хотите удалить этот элемент? Точно-точно, совсем-совсем?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" id="deleteElementBtn">Удалить</button>
                    <button type="button" class="btn btn-success" data-dismiss="modal">Отмена</button>
                </div>
            </div>
        </div>
    </div>


</div>

<script>
    class App {
        static init() {

            App.dragAndDropEnabled = false;
            this.IsDragging = false;

            const boxes = document.getElementsByClassName('box');

            for (var i = 0; i < boxes.length; i++) {
                var _box = boxes[i];
                _box.addEventListener("dragstart", App.dragstart);
                _box.addEventListener("dragend", App.dragend);

            }

            const containers = document.getElementsByClassName('holder');

            for (var i = 0; i < containers.length; i++) {
                var container = containers[i];
                container.addEventListener("dragover", App.dragover);
                container.addEventListener("dragenter", App.dragenter);
                container.addEventListener("dragleave", App.dragleave);
                container.addEventListener("drop", App.drop);
            }
        }
        static dragstart() {

            console.log('dragstart');

            if (!App.dragAndDropEnabled) {
                return "false";
            }

            App.IsDragging = true;
            App.box = this;
            App.CopyFrom = $(this).parent();

            //подсветить места для вставки
            var typeOfPortableNodeStr = $(App.box).attr('nodeType');
            showHints(typeOfPortableNodeStr);

            //При переносе элемент меняет стиль
            this.className += " held";

            App.IsDefaultNode = IsDefaultNodeMy(this);

            if (App.IsDefaultNode) {
                //при переносе блока из стандартного набора
                //блок, который лежит не пропадает
            } else {
                //при переносе блока не из стандартного набора
                //блок, который лежит становится невидимым

                setTimeout(() => {
                    this.className = "invisibleMy";
                }, 1);
            }
        }
        static dragend() {

            console.log('dragend');

            App.IsDragging = false;
            this.className = "box";

            //скрыть све строки с подсказками
            hideHints();


        }
        static dragover(e) {

            console.log('dragover');

            var canAddNewBox = doesNotContainBoxes(this);

            //если ячейка пуста
            if (App.IsDragging && canAddNewBox) {
                //показать курсор
                e.preventDefault();
            }
        }
        static dragenter(e) {

            console.log('dragenter');

            var canAddNewBox = doesNotContainBoxes(this);

            if (App.IsDragging && canAddNewBox) {
                e.preventDefault();
                this.className += " hovered";
            }
        }
        static dragleave() {
            this.className = "holder";
        }
        static drop() {

            var canAddNewBox = doesNotContainBoxes(this);

            if (App.IsDragging && canAddNewBox) {

                //Из пунктирного борта устанавливает сплошной
                this.className = "holder";


                var oldCoordStr = $(App.box).closest('td').attr('id');
                var nodeName = $(App.box).children('.nameOfNodeDiv').children('.nameOfNodeH').text();
                var nodeTypeStr = $(App.box).attr('nodeType');


                //Перемещает скопированный элемент
                this.append(App.box);
                //создание копии перемещённого элемента
                var boxForDefaultNodesTable = $(App.box).clone();
                $(boxForDefaultNodesTable).removeClass("held");

                //прикрепление событий
                boxForDefaultNodesTable.on("dragstart", App.dragstart);
                boxForDefaultNodesTable.on("dragend", App.dragend);

                //Возвращение в место откуда взяли
                App.CopyFrom.append(boxForDefaultNodesTable);

                //при перемещении объекта из разметки он скрывается
                //теперь скрытый объект нужно удалить
                //если объект перемещался из стандартного набора
                //то эта хрень бесполезна
                setTimeout(() => {
                    $("div.invisibleMy").remove();
                }, 1);

                //Обнуление объекта перемещаемого box-a
                App.box = null;

                //создание элемента в структуре
                var x_y = $(this).closest('td').attr('id');

                if (x_y == oldCoordStr) {
                    console.log('new coord == oldCoordStr');
                    console.log(x_y);
                    return;
                }

                var _coord = get_x_y_fromTdId(x_y);

                
                if (TableController.matrix[_coord.x][_coord.y] == null ||
                    TableController.matrix[_coord.x][_coord.y] == 'undefined') {
                    TableController.matrix[_coord.x][_coord.y] = new Object();
                }
       
                var nodeTypeEnum = nodeTypes[nodeTypeStr];

                if (oldCoordStr !== 'undefined' && oldCoordStr !== null && !App.IsDefaultNode) {

                    var oldCoordMy = get_x_y_fromTdId(oldCoordStr);

                    TableController.matrix[_coord.x][_coord.y] = TableController.matrix[oldCoordMy.x][oldCoordMy.y];

                    //удалить узел из структуры, если он не переносится из стандартного набора
                    TableController.matrix[oldCoordMy.x][oldCoordMy.y] = null;

                    TableController.matrix[_coord.x][_coord.y].x = _coord.x;
                    TableController.matrix[_coord.x][_coord.y].y = _coord.y;
                    

                } else {

                    TableController.matrix[_coord.x][_coord.y].nodeParams = nodeTypesToParams[nodeTypeEnum]();
                    TableController.matrix[_coord.x][_coord.y].nodeType = nodeTypeEnum;
                    TableController.matrix[_coord.x][_coord.y].nodeName = nodeName;

                    TableController.matrix[_coord.x][_coord.y].x = _coord.x;
                    TableController.matrix[_coord.x][_coord.y].y = _coord.y;
                   
                }

                
                //Перерисовка таблицы
                setTimeout(() => { redrawTable() });
            }

        }

        static dragoverHintCell(e) {
            console.log('dragoverHintCell');
            e.preventDefault();
        }
        static dropOnHintCell() {
            //удаляет скрытый невидимый узел из
            //места откуда копировали
            //при переносе из стандартного набора
            //абсолютно бесполезно
            setTimeout(() => {
                $("div.invisibleMy").remove();
            }, 1);

            var coordStr = $(this).closest('td').attr('id');
            var coord = get_x_y_fromTdIdHint(coordStr);

            console.log(TableController.matrix);

            //сдвиг в структуре данных
            //+-работает
            for (var x = TableController.matrix.length; x >= 0; x--) {
                for (var y = TableController.matrix[0].length - 1; y >= coord.y; y--) {

                    if (TableController.matrix[x] != null && TableController.matrix[x] != 'undefined') {
                        if (TableController.matrix[x][y] != null && TableController.matrix[x][y] != 'undefined') {

                            TableController.matrix[x][y].y++;
                            TableController.matrix[x][y + 1] = TableController.matrix[x][y];
                            TableController.matrix[x][y] = null;

                        }
                    }
                }
            }

            //вставить новый раздел в образовавшийся пробел
            TableController.matrix[coord.x][coord.y] = new Object();
            var nodeType = $(App.box).attr('nodeType');
            var nodeName = $(App.box).children('.nameOfNodeDiv').children('.nameOfNodeH').text();

            var nodeTypeEnum = nodeTypes[nodeType];

            TableController.matrix[coord.x][coord.y].nodeParams = nodeTypesToParams[nodeTypeEnum]();
            TableController.matrix[coord.x][coord.y].nodeType = nodeTypeEnum;
            TableController.matrix[coord.x][coord.y].nodeName = nodeName;
            TableController.matrix[coord.x][coord.y].x = coord.x;
            TableController.matrix[coord.x][coord.y].y = coord.y;


            //полная перерисовка таблицы по матрице
            console.log(TableController.matrix);

            fullRedraw();


        }

    }

    function IsDefaultNodeMy(_obj) {
        var parents = $(_obj).parents();
        var isDefaultNode = false;
        for (var i = 0; i < parents.length; i++) {
            if ($(parents[i]).hasClass("standardSet")) {
                isDefaultNode = true;
                break;
            }
        }

        return isDefaultNode;
    }

    function fullRedraw() {
        //опустошить всю таблицу
        $('#tableMarkup .box').remove();

        //вставка элементов
        for (var y = 0; y < TableController.matrix[0].length; y++) {
            for (var x = 0; x < TableController.matrix.length; x++) {


                var node = TableController.matrix[x][y];
                if (node == null || node == 'undefined') {
                    continue;
                }

                //null == undefined, но null !== undefined
                if (node.nodeParams == null || node.nodeParams == 'undefined') {
                    console.error('Параметры узла должны быть установлены!');
                    node.nodeParams = nodeTypesToParams[node.nodeType]();
                    //throw new Error('Параметры узла должны быть установлены!');
                }



                //найти div box-a с таким типом узла в стандартном наборе
                var neededNodeFromStandartSet = $(`.box[nodeType=${nodeTypeStringArray[node.nodeType - 1]}]`)[0];

                if (neededNodeFromStandartSet == null || neededNodeFromStandartSet == 'undefined') {
                    throw new Error('узел не найден ');
                }


                //вставить его

                var idOfTableCell = "#" + x + "_" + y;

                var newBox = $(neededNodeFromStandartSet)
                    .clone()
                    .removeClass('held');

                newBox.bind('dragstart', App.dragstart);
                newBox.bind('dragend', App.dragend);

                newBox.appendTo($(idOfTableCell).children()[0]);

                //установить название узла
                var nameOfNodeH = $(idOfTableCell + ' .box .nameOfNodeDiv .nameOfNodeH');

                nameOfNodeH.text(node.nodeName);

            }
        }

        redrawTable();

    }

    function hideHints() {
        //console.log("hide hints");

        if (TableController.rowsHint == null || TableController.rowsHint == 'undefined') {
            return;
        }

        //скрытие строк 
        for (var i = 0; i < TableController.rowsHint.length; i++) {
            TableController.rowsHint[i].css('visibility', 'hidden');
            var hintCells = TableController.rowsHint[i].children();
            for (var j = 0; j < hintCells.length; j++)
            {
                $(hintCells[j]).css('visibility', 'hidden');
            }
            TableController.rowsHint[i].removeClass('hint');
        }

        //скрытие подсвеченных ячеек
        for (var i = 0; i < TableController.cellsHint.length; i++) {
            TableController.cellsHint[i].removeClass('hintCell');
            TableController.cellsHint[i].unbind('drop');
        }


    }

    function showHints(typeOfPortableNodeStr) {

        var typeOfPortableNode = zachem[typeOfPortableNodeStr];

    
        if (typeOfPortableNode == nodeTypes.section) {
            
            var allSections = [];

            for (var i = 0; i < TableController.matrix.length; i++) {

                var tmpArr = TableController.matrix[i].filter(_obj => {
                    if (_obj != null && _obj != 'undefined') {
                        return _obj.nodeType == nodeTypes.section;
                    }
                    return false;
                }
                );

                //список всех узлов типа раздел
                allSections = allSections.concat(tmpArr);

            }


            TableController.rowsHint = [];
            TableController.cellsHint = [];

            for (var i = 0; i < allSections.length; i++) {

                //показать показ всей строки 
                var rowId = "#hint_" + allSections[i].y;
                console.log(`rowId =${rowId}`);

                $(rowId).css('visibility', 'visible');
                $(rowId).addClass('hint');

                var xMax = TableController.xMax;

                //показ всех 
                for (var x = 0; x < xMax+2; x++) {
                    var hintCellId = "#hint_" + (x) + "_" + (allSections[i].y + 1);
                    //console.log(`show hintCellId =${hintCellId}`);

                    $(hintCellId).css('visibility', 'visible')
                }

                //скрытие лишних элементов (та часть строки, которая выпирает справа)
                console.log(`xMax = ${xMax}`);
                for (var x = xMax+2; x < 20; x++) {
                    
                    var hintCellId = "#hint_" + (x) + "_" + (allSections[i].y+1);
                    //console.log(`hide hintCellId =${hintCellId}`);
                    $(hintCellId).css('visibility', 'hidden')
                }

                //Сохранение строк для того, чтобы скрыть их после dragend
                TableController.rowsHint.push($(rowId));

                //подсветить ячейку под разделом
                var hintY = allSections[i].y + 1;
                var cellId = "#hint_" + allSections[i].x + "_" + hintY;

                $(cellId).addClass('hintCell');

                //Обработка бросания элемента в ячейку
                $(cellId).bind('dragover', App.dragoverHintCell);
                $(cellId).bind('drop', App.dropOnHintCell);

                //Сохранение подсвеченых ячеек для того, чтобы скрыть их после dragend
                TableController.cellsHint.push($(cellId));

            }
        }

        //if (typeOfPortableNode == nodeTypes.product) {
        //    //подсветить под всеми товарами
        //}


    }

    function get_x_y_fromTdId(str) {
        var x_y = new Object();
        var arr_x1_y2 = str.split('_');
        x_y.x = parseInt(arr_x1_y2[0]);
        x_y.y = parseInt(arr_x1_y2[1]);

        return x_y;
    }
    function get_x_y_fromTdIdHint(str) {
        var x_y = new Object();
        var arr_x1_y2 = str.split('_');
        x_y.x = parseInt(arr_x1_y2[1]);
        x_y.y = parseInt(arr_x1_y2[2]);

        return x_y;
    }

    class TableController {
        static init() {

            TableController.xMax = 0;
            TableController.yMax = 0;

            TableController.matrix = matrixArray(10, 50);
        }
    }

    function matrixArray(xMax, yMax) {
        var arr = new Array();
        for (var i = 0; i < xMax; i++) {
            arr[i] = new Array();
            for (var j = 0; j < yMax; j++) {
                arr[i][j] = null;
            }
        }
        return arr;
    }
    function redrawTable() {

        var xMax = 0;
        var yMax = 0;

        //перебор в лоб
        for (var x = 0; x < TableController.matrix.length; x++) {
            for (var y = 0; y < TableController.matrix[0].length; y++) {
                if (TableController.matrix[x][y] != null &&
                    TableController.matrix[x][y] != 'undefined') {
                    if (x > xMax) {
                        xMax = x;
                    }

                    if (y > yMax) {
                        yMax = y;
                    }
                }
            }
        }

        //скрыть всё
        for (var x = 0; x < TableController.matrix.length; x++) {
            for (var y = 0; y < TableController.matrix[0].length; y++) {
                var coord = (x) + "_" + (y);
                $("#" + coord).css("visibility", "hidden");
            }
        }

        //показать нужное
        for (var x = 0; x <= xMax + 1; x++) {
            for (var y = 0; y <= yMax + 1; y++) {
                var coord = (x) + "_" + (y);
                $("#" + coord).css("visibility", "visible");
            }
        }

        TableController.xMax = xMax;
        TableController.yMax = yMax;

    }

    function doesNotContainBoxes(holder) {

        if (!holder.className == "holder") {
            console.error("Нужно вызывать только у класса holder!");
            throw new Error('Нужно вызывать только у класса holder!');
        }

        var children = $(holder).children(".box");
        var hasChildren;
        if (children.length == 0) {
            hasChildren = false;
        } else {
            hasChildren = true;
        }
        return !hasChildren;

    }

    //нужно убрать
    class HtmlController {

    }

    document.addEventListener("DOMContentLoaded", App.init);
    document.addEventListener("DOMContentLoaded", TableController.init);

</script>

<script>

    function showNodes() {
        console.log(' ')
        console.log(' ')
        console.log(' ')
        console.log(' ')
        console.log(' ')
        console.log(' ')
        console.log(' ')
        console.log(' ')
        console.log(' ')
        for (var y = 0; y < TableController.matrix[0].length; y++) {
            for (var x = 0; x < TableController.matrix.length; x++) {
                var node = TableController.matrix[x][y];
                if (node == null || node == 'undefined') {
                    continue;
                }
                console.log(node);
            }
        }
    }
        
    testCheckbox();

    function testCheckbox() {

        if ($('#lock').prop('checked')) {

            App.dragAndDropEnabled = false;

            //Выключение перетаскивания
            $(".box").attr('draggable', 'false');
            $(".box").css("cursor", "default");

            //показать настройки
            $(".settingMy").css("display", "block");
            //скрыть корзину
            $(".trashMy").css("display", "none");

        } else {

            App.dragAndDropEnabled = true;

            //Включение перетаскивания
            $(".box").attr('draggable', 'true');
            $(".box").css("cursor", "pointer");

            //показать корзину
            $(".trashMy").css("display", "block");
            //скрыть настройки
            $(".settingMy").css("display", "none");

        }
    }

    function createNewProductCharacteristic()
    {
        var prod = TableController.editableProduct;
        if (prod == null || prod == 'undefined')
        {
            alert('невозможно добавить характеристику т.к. нет переменной товара. кто-то не смог в js')
            return;
        }

        //Нарисовать html
        //$('#charTemp').clone(true).css('display', 'block').insertBefore('#createChar');

        //добавить данные в структуру 
        var newStandartCharacteristic = new Characteristic('Характ-ка', ['значение1', 'значение2', 'значение3']);
        prod.nodeParams.characteristics.push(newStandartCharacteristic);

        redrawProductCharacteristics();

        redrawPrices();
    }

    function redrawProductCharacteristics() {

        //убрать видимые карточки с характеристиками
        $('#charsDeck .charCard').filter(function () {
            return this.style.display != 'none'
        }).remove();

        //достать характеристики товара
        var chars = TableController.editableProduct.nodeParams.characteristics;
        
        for (var i = 0; i < chars.length; i++) {

            var currentChar = chars[i];

            //создать карточку для каждой характеристики
            var card = $('#charTemp').clone(true).css('display', 'block');

            var textareas = card.find('.textareaMy');
            
            //вставка значений
            for (var j = 0; j < currentChar.arrOfValues.length; j++) {
                var currentValue = currentChar.arrOfValues[j];
                $(textareas[j]).val(currentValue)
            }

            ///вставка названия 
            card.find('.textareaTitleMy').val(currentChar.characteristicName);

            //вставить в разметку
            card.insertBefore('#createChar');

        }
       

    }


    function saveTextareaValuesCharacteristics() {

        var allCards = $('#charsDeck .charCard').filter(function () {
            return this.style.display != 'none'
        });

        //сохранить значения textarea
        for (var i = 0; i < allCards.length; i++) {

            var card = allCards[i];
            var textareas = $(card).find('.textareaMy');
            var currentCharacteristic = TableController.editableProduct.nodeParams.characteristics[i];

            //сохранить значения value
            for (var j = 0; j < currentCharacteristic.arrOfValues.length; j++) {
                var currentValue = $(textareas[j]).val();
                currentCharacteristic.arrOfValues[j] = currentValue;
            }

            //сохранить значение title
            var characteristicTitle = $(card).find('.textareaTitleMy').val();
            currentCharacteristic.characteristicName = characteristicTitle;
        }
    }

    //находит декартово произведение 
    // ((11 22) (33 44) ) => ((11 33) (11 44) (22 33) (22 44))
    function cartesian(arrays) {



        // находим число элементов в декартовом произведении
        let resultLength = 1;
        for (let array of arrays) {
            resultLength *= array.length;
        }

        // создаём массив такого размера и перебираем номер элемента
        let result = new Array(resultLength);
        for (let i = 0; i < resultLength; ++i) {
            // один элемент декартова произведения
            let element = new Array(arrays.length);
            let elementIndex = i;
            // цикл в обратном порядке нужен чтобы элементы начинали изменяться с конца
            for (let j = arrays.length - 1; j >= 0; --j) {
                const array = arrays[j];
                // имеем биекцию между индексами элементов декартова произведения (числа от 0 до resultLength-1)
                // и кортежами длины arrays.length, в которых каждый элемент — индекс в соответствующем массиве
                element[j] = array[elementIndex % array.length];
                // целочисленное деление
                elementIndex = Math.floor(elementIndex / array.length);
            }
            result[i] = element;
        }
        return result;
    }
    
    function redrawPrices() {

        
        
        //
        //                                                                                                                                                               
        //                                                                                                                                                       
        //                                                                  .,*/(((#(((((((/**,                                                                  
        //                                                              ,//,,...           ....,,*/*.                                                            
        //                                                          ./((,           ./,            .*(,                                                          
        //                                                        .(%*.              */               ,*.                                                        
        //                                                      ./(,                 */                 */.                                                      
        //                                                     ,#/.                  //                  *(.                                                     
        //                                                   .(#.           ,,                            **                                                     
        //                                                  .(*           /%/.                             /.                                                    
        //                                                 .(*          *%%,     .   **                    *,                                                    
        //                                                .#*         .(&(.   *#%#/.                       .*.                                                   
        //                                               .(/         ,(.   ,%&(.(, */                    .*,                                                   
        //                                               */          /(((*,..((,*,(,.,,.                    **                                                   
        //                                              .*.         */,  .,/&&*,/.##((/***//,.              .(.                                                  
        //                                              */         .(*.   *(/%**/./,(&%,    .,//,           ./.                                                  
        //                                             .(.         */.   ,#,*(.,/.*.,*//       .*/.          /*                                                  
        //                                            .(*         .(*/((/##..,       ./#,...     .*,         /*                                                  
        //                                            *(.         /%#/(* ,#,         /&%#&/*#%/. .((         *#.                                                 
        //                                           .(,         .(,  ./(%&*         ,#* ((/(#(.  (#         /#.                                                 
        //                                           ,/.         //      ,%,         ,(.   ..    .(*         /*                                                  
        //                                           *(         .#*       #/        .(*          ./,         /*                                                  
        //                                           //         .(,      .#/        /&*          ./,        .(*                                                  
        //                                           /*         *#,      *#.      .(///          ,/         .(,                                                  
        //                                          .#*         *%.   ,%@@&/       */             */         ,(.                                                  
        //                                           *#,        /%,  ,((.*//,.    (( ..          /,         /(.                                                  
        //                                            ,#*       *#,  (#,   .,//*.*%(,((         ,#,         //                                                   
        //                                             .//.     .##..(/.       ,*/#/*,.         */.        .(,                                                   
        //                                               ,/#/,. ,#(#&%/          .*  ..        ,%*         */.                                                   
        //                                                  .,((*. (@@&(.        ./,  //       ,(*((*.....,//.                                                    
        //                                                       *(/*#&&(,     .(/       .*(%&%,  ..,***,.                                                       
        //                                                     .((.   .*#&&&%%%%/  .,/#((/,./%#.                                                                 
        //                                            ... ..,**#/             .#&((/*(*     /%#.                                                                 
        //                                        .*(#%%%%#(/*(#.              (%,          *#%,                                                                 
        //                                      ,##*.        ,#,               (&,          ,/###*.                                                              
        //                                    .*#,           (/               .##.   *, .,*/*.   .*((/*.                                                         
        //                                   .#%,          ./(.               ,&&//((%#(*.            .*/((*.                                                    
        //                           ,//.    *%/          /(,                .(%,                          .*(*.                                                 
        //                            .(,    /#*        .(/.                 /%*     /*                      ./#,       */                                       
        //                            ,(/    /#*,((*.  *. ,//*   *(*.  .((#%,,//.  /#((,  .*(,   *(*  .//.   .(/     ,//.                                      
        //                           ,,,, ,, *%(  ,,   *(.                 *%,                                  .((   ,(#%*                                      
        //                                   .#&/  *(. /(                 *%,                                    .((,    .  *,                                   
        //                                    ,/%,    .//.               *%,        ./.                           .((.                                           
        //                                     .#(.    ,/.             .*#,          *,                            *(*                                           
        //                                      .%#.      **.         .#(.                                         ./(.                                          
        //                                       ,%(.     .*/.       ,(#.            ..                             ,#,                                          
        //                                        ,%%,        ..    ,#/.             *,                             ,%*                                          
        //                                         (@@#,       ,,.,#(.                                      .        (,                                          
        //                                         ,#/&&(.    ../%(,                                       */        (,                                          
        //                                         ./,.*%(#&,  ,/,.              ,.                   .(,        (*                                          
        //                                          //   ,//*.          .           ./,                   ,#.       ,%*                                          
        //                                          ,/.                 **.                               *(        .#,                                          
        //                                          ,(,                    ..        .                    (/        .%,                                          
        //                                          .#*                     *(.     .(,                  .#/        ,(.                                          
        //                                           /*                         .    ,.                  .#/        ,(.                                          
        //                                           *(.                        ,/.  ,                   .#/        ,(.                                          
        //                                           ,(.                            .(.                  .#/        ,/                                           
        //                                           .(,                           ./*                   .#/        ,/.                                          
        //                                            /,                                                 .#/        ,/                                           
        //                                            (/                            *(/.                 .#/        ,/.                                          
        //                                            (#                              **                 .#/        .#,                                          
        //                                            /*                             ..                  .#(         (/                                          
        //                                            /,                           .((/, ,.              .#%.        *(.                                         
        //                                            /,                                                  /#.        .(,                                         
        //                                           ,#,                                                  .#,         //                                         
        //                                           //                                                    //         ,/                                         
        //                                          ,(,                                                    /%.        ,#,                                        
        //                                         .(*                                                     .%(        .(,                                        
        //                                         *(.                                                      (%.        (,                                        
        //                                        .(*                                                       *%*        /,                                        
        //                                        .#,                                                       .##.      .#,                                        
        //                                        ./.                                                        (&,      ,#,                                        
        //                                        ./.                                                        /&/      ,/                                         
        //                                         //.                                                       /&*      ((                                         
        //                                         .*//*,.                                                  .(#.      ,.                                         
        //                                             .*//((*,,,,.                                       .(.                                                  
        //                                                   ....,**/((/(//*,.....,*/////////(#((#/********,.                                                    
        //                                                                 ..,,,,...                                                                             
        //                                                                                                                      
        //                                                   
        //
        
        //нахождение всех комбинаций характеристик

        var chars = TableController.editableProduct.nodeParams.characteristics;
        //в этом массиве лежат массивы характеристик
        var arrsOfValues = [];
        for (var i = 0; i < chars.length; i++) {
            for (var j = 0; j < chars[i].arrOfValues.length; j++) {

                if (j == 0) {
                    arrsOfValues[i] = [];
                }

                var value = chars[i].arrOfValues[j];

                if (value != null && value != 'undefined' && value != '') {
                    //value not empty
                    arrsOfValues[i].push(value);
                }
            }
        }

        var descart = cartesian(arrsOfValues);      

        //убрать видимые названия колонок
        $('.titleTableBody .valueTitleMy').filter(function () {
            return this.style.display != 'none'
        }).detach();

        //удалить видимые строки с ценами
        $('.priceTableBody .priceRow').filter(function () {
            return this.style.display != 'none'
        }).detach();

        //клон названия колонки
        var valueTitleTh = $('.titleTableBody .valueTitleMy').filter(function () {
            return this.style.display == 'none'
        }).clone(true).css('display', 'table-cell');


        //установить названия колонок с характеристиками
        for (var i = 0; i < chars.length ; i++) {
            $(valueTitleTh).clone(true).html(chars[i ].characteristicName).insertBefore('.priceTitleMy');
        }



        //клон строки
        var newRow = $('#priceRowTemplate').clone(true).css('display', 'table-row');
        newRow.attr('id', '');
        $(newRow).insertBefore('#priceRowTemplate');

        //td с конкретным значением
        var valueTd = $(newRow.children('.value')[0]).clone(true);
        

        //удаление всех ячеек со значениями
        newRow.children('.value').detach();

        for (var i = 0; i < chars.length; i++) {

            //записать в td значение их первого набора
            valueTd.html(descart[0][i]);
            $(valueTd).insertBefore('.price');
        }

        //записать первую цену
        var price = TableController.editableProduct.nodeParams.prices[0];
        if (price == null || price == 'undefined') {
            price = '';
        }

        var test1 = $(newRow).find('.myDichTextareaPrice');
        $(test1).val(price);

        var rowStrHtml = new MyStubStr(chars.length);       

        if (descart != null && descart != 'undefined' && descart.length > 1) {

            var firstRow = $('.priceRow').clone(true);
            var rowHtmlStr = firstRow.html();

            for (var i = 1; i < descart.length; i++) {

                var price = TableController.editableProduct.nodeParams.prices[i];
                if (price == null || price == 'undefined') {
                    price = '';
                }
                var tmpStr = rowStrHtml.getStrHtml(i + 1, descart[i], price );
                $(tmpStr).insertBefore('#priceRowTemplate');
            }
        }
    }

    //setInterval(() => {
        
    //    if (TableController.autoSaveModeOn) {
    //        if (TableController.matrix != TableController.savedMatrix) {
    //            TableController.savedMatrix = TableController.matrix;
    //        }
    //    }
    //}, 1000);


</script>

<script>

    $(document).ready(function () {

        @*Обработка потери фокуса на textarea с ценой*@
        $(document).on('blur', '.myDichTextareaPrice', function () {

            var textarea = $(this);
            var text = textarea.val();

            var currentRow = textarea.closest('.priceRow');
            var listOfRows = $('.priceTableBody').children();
            var index = listOfRows.index(currentRow);

            TableController.editableProduct.nodeParams.prices[index] = text;

        });


        $('#shortDescriptionProduct').on('blur', function (e) {

            var textarea = $(this);
            var text = textarea.val();

            TableController.editableProduct.nodeParams.message = text;

        });


        $('#fullDescriptionProduct').on('blur', function (e) {

            var textarea = $(this);
            var text = textarea.val();

            //сохранить полное описание
            TableController.editableProduct.nodeParams.fullDescription = text;
        });

        //Обработка удаления карточек с характеристиками в товаре
        $('.deleteCard').on('click', function () {

            //показывать окошо с предупреждением?

            var pressedBtn = $(this);

            // удалить элемент из структуры данных
            var obj = pressedBtn.closest('.charCard');
            var deck = $('#charsDeck').children();

            var index = deck.index(obj);
            var chars = TableController.editableProduct.nodeParams.characteristics;
            chars.splice(index-1, 1);
            pressedBtn.closest('.charCard').remove();

            redrawPrices();
        });

        $('.textareaMy').on('blur', function (e) {

            saveTextareaValuesCharacteristics();

            /*Обрезка длинны массива с ценами */
            var chars = TableController.editableProduct.nodeParams.characteristics;
            var numberOfCombinations = 1;
            for (var i = 0; i < chars.length; i++) {
                var tmp = 0;
                for (var j = 0; j < chars[i].arrOfValues.length; j++) {
                    if (chars[i].arrOfValues[j] != '' &&
                        chars[i].arrOfValues[j] != null &&
                        chars[i].arrOfValues[j] != 'undefined') {
                        tmp++;
                    }
                }
                numberOfCombinations *= tmp;
            }

            TableController.editableProduct.nodeParams.prices.length = numberOfCombinations;

            redrawPrices();

        });


        $('.textareaTitleMy').on('blur', function (e) {

            saveTextareaValuesCharacteristics();
            
            redrawPrices();

        });



        //показ модального окна редактирования отправки
        $('#modalEditNodeSendOrder').on('show.bs.modal', function (event) {

            var button = $(event.relatedTarget);
            var modal = $(this);

            HtmlController.pressedButton = button;

            var nodeName = button.closest('.box').children('.nameOfNodeDiv').children('.nameOfNodeH').text();

            //Установка названия узла
            modal.find('#h5Test5').text(nodeName);

            //если стандартный узел, то написать, что так низя
            var isDefaultNode = IsDefaultNodeMy(button);


            if (isDefaultNode) {

                return;
            }

            var coordStr = button.closest('td').attr('id');
            var coord = get_x_y_fromTdId(coordStr);

            TableController.editableSendOrder = TableController.matrix[coord.x][coord.y];

            $('#sendOrderDescriptionTextarea').val(TableController.editableSendOrder.nodeParams.message);

            

        });



        //показ модального окна редактирования отправки
        $('#modalEditNodeSendOrder').on('hidden.bs.modal', function (event) {

         

            TableController.editableSendOrder.nodeParams.message = $('#sendOrderDescriptionTextarea').val();

            



        });


        //показ модального окна редактирования товара
        $('#modalEditNodeProduct').on('show.bs.modal', function (event) {

            var button = $(event.relatedTarget);
            var modal = $(this);


            HtmlController.pressedButton = button;

            var nodeName = button.closest('.box').children('.nameOfNodeDiv').children('.nameOfNodeH').text();

            //Установка названия узла
            modal.find('#h5Test4').text(nodeName);

            //если стандартный узел, то написать, что так низя
            var isDefaultNode = IsDefaultNodeMy(button);

            if (isDefaultNode) {
                return;
            }

            var coordStr = button.closest('td').attr('id');
            var coord = get_x_y_fromTdId(coordStr);

            //записать товар в глобальную переменную
            //для того, чтобы редактировать узел при нажатии на кнопки
            //в модально окне
            TableController.editableProduct = TableController.matrix[coord.x][coord.y];

            //достать краткое описание
            $('#shortDescriptionProduct').val(TableController.editableProduct.nodeParams.message);

            //достать полное описание
            $('#fullDescriptionProduct').val(TableController.editableProduct.nodeParams.fullDescription);

            var url_string = window.location.href;
            var url = new URL(url_string);
            var botId = url.searchParams.get("botId");
            var productId = TableController.editableProduct.nodeParams._productId;
            var newUrlToPostNewImage = `/BotForSalesEditing/SetImage?botId=${botId}&productId=${productId}`;

            var newUrlToGetNewImage = `/BotForSalesEditing/GetImagePhoto?botId=${botId}&productId=${productId}`;

            $("#formSendImageProduct").attr("action", newUrlToPostNewImage);

            $("#stretchedLinkProductImage").attr("href", newUrlToGetNewImage);
            

            drawImage(botId, productId);

            //перерисовка характеристик
            redrawProductCharacteristics();

            //перерисовка цены
            redrawPrices();

            //TODO запрос картинки товара
            //если картики нет, то сообщить об этом



        });


        //скрытие модального окна редактирования товара
        $('#modalEditNodeProduct').on('hidden.bs.modal', function () {

            saveTextareaValuesCharacteristics();

            TableController.editableProduct = null;

        })



        //показ модального окна редактирования инпута
        $('#modalEditNodeInput').on('show.bs.modal', function (event) {

            var button = $(event.relatedTarget);
            var modal = $(this);

            HtmlController.pressedButton = button;

            var nodeName = button.closest('.box').children('.nameOfNodeDiv').children('.nameOfNodeH').text();

            //Установка названия узла
            modal.find('#h5Test3').text(nodeName);

            //если стандартный узел, то написать, что так низя
            var isDefaultNode = IsDefaultNodeMy(button);

            //костыль
            if (isDefaultNode) {
                return;
            }


            var coordStr = button.closest('td').attr('id');
            var coord = get_x_y_fromTdId(coordStr);

            TableController.editableInput = TableController.matrix[coord.x][coord.y];

            var answerIsRequired = TableController.editableInput.nodeParams.answerIsRequired;

            if (answerIsRequired == null || answerIsRequired == 'undefined') {
                console.log(TableController.matrix[coord.x][coord.y]);
                throw new Error('У инпута не установлено значение. answerIsRequired fail');
            }




            //установка значения необходимости ответа
            if (answerIsRequired) {
                var radioBtn = modal.find('#answerIsRequired');
                radioBtn.addClass('active');
                radioBtn.prop('checked', true);
            } else {
                var radioBtn = modal.find('#answerIsNotRequired');
                radioBtn.addClass('active');
                radioBtn.prop('checked', true);
            }
            //заполнить checkbox-ы
            var types = TableController.editableInput.nodeParams.expectedResponseFormat;
            

            for (var i = 0; i < types.length; i++) {
                
                var item = types[i];
                var idOfCheckbox = '#inputExpectedResponseFormat' + item.nameOfValue;
                
                $(idOfCheckbox).prop('checked', item.value);
                
            }

            //заполнить краткое описание
            $('#inputShortDescriptionTextarea').val(TableController.editableInput.nodeParams.message);

        });

        //скрытие модального окна редактирования раздела
        $('#modalEditNodeInput').on('hidden.bs.modal', function () {

            //сохранить необходимость ответа
            var answerIsRequired = $('#answerIsRequired').prop('checked');

            TableController.editableInput.nodeParams.answerIsRequired = answerIsRequired;
            var expForm = TableController.editableInput.nodeParams.expectedResponseFormat;

            //сохранить формат ответа
            var checkboxes = $('#expectedResponseFormatContainer input');

            for (var i = 0; i < checkboxes.length; i++) {
                var tmpCheckbox = checkboxes[i];
                var qqq = null;
                for (var j = 0; j < expForm.length; j++) {
                    if (expForm[j].nameOfValue == $(tmpCheckbox).attr('expectedResponseFormat')) {
                        qqq = expForm[j];
                    }
                }

                qqq.value = $(tmpCheckbox).prop('checked');
              
            }


            //сохранить краткое описание
            TableController.editableInput.nodeParams.message = $('#inputShortDescriptionTextarea').val();



            TableController.editableInput = null;
        })

        //показ модального окна редактирования раздела
        $('#modalEditNodeSection').on('show.bs.modal', function (event) {

            var button = $(event.relatedTarget);
            var modal = $(this);

            HtmlController.pressedButton = button;

            //Название узла из box-а
            var nodeName = button.closest('.box').children('.nameOfNodeDiv').children('.nameOfNodeH').text();

            //Установка названия узла
            modal.find('#h5Test2').text(nodeName);

            //если стандартный узел, то написать, что так низя
            var isDefaultNode = IsDefaultNodeMy(button);

            //костыль
            if (isDefaultNode) {
                return;
            }

            //установка значений radio btn по структуре данных

            var coordStr = button.closest('td').attr('id');
            var coord = get_x_y_fromTdId(coordStr);
            var radioBtnValue = TableController.matrix[coord.x][coord.y].nodeParams.scrollingMethod;

            TableController.editableSection = TableController.matrix[coord.x][coord.y];

            if (radioBtnValue == sectionScrollingMethodEnum.sendingAll) {

                var radioBtn = modal.find('#sendingAll');
                radioBtn.addClass('active');
                radioBtn.prop('checked', true);


            } else if (radioBtnValue == sectionScrollingMethodEnum.sendingOnlySelected) {

                var radioBtn = modal.find('#sendingOnlySelected');
                radioBtn.addClass('active');
                radioBtn.prop('checked', true);

            } else {
                console.log('radioBtnValue=');
                console.log(radioBtnValue);
                throw new Error('Неизвестный споспоб перелистывания страниц');
            }

        });

        /*Обработка переключения режима листания разделов*/
        $('#sendingAll').change(function () {


            if (TableController.editableSection == null ||
                TableController.editableSection == 'undefined') {
                throw new Error(`если меняется значение checkbox-a
                        в модальном окне раздела, то при открытии
                        модально окна должна была быть установлена
                        переменная TableController.editableSection `);
            }

            if ($(this).prop('checked')) {
                console.log("установка нового значения")
                TableController.editableSection.nodeParams.scrollingMethod = sectionScrollingMethodEnum.sendingAll;
            }
        });
        //Дублирование кода
        $('#sendingOnlySelected').change(function () {


            if (TableController.editableSection == null ||
                TableController.editableSection == 'undefined') {
                throw new Error(`если меняется значение checkbox-a
                        в модальном окне раздела, то при открытии
                        модально окна должна была быть установлена
                        переменная TableController.editableSection `);
            }

            if ($(this).prop('checked')) {
                console.log("установка нового значения")
                TableController.editableSection.nodeParams.scrollingMethod = sectionScrollingMethodEnum.sendingOnlySelected;
            }


        });

        //скрытие модального окна редактирования раздела
        $('#modalEditNodeSection').on('hidden.bs.modal', function () {
            TableController.editableSection = null;
        })

        //показ модального окна удаления
        $('#exampleModal').on('show.bs.modal', function (event) {

            var button = $(event.relatedTarget); // Button that triggered the modal
            var recipient = button.data('whatever'); // Extract info from data-* attributes

            var modal = $(this);

            //если стандартный узел, то написать, что так низя
            var parents = button.parents();
            var isDefaultNode = IsDefaultNodeMy(this);

            modal.find('.modal-title').text('Подтвердите действие ');


            if (isDefaultNode) {
                modal.find('.modal-body').text('Стандартные узлы удалять нельзя.');
                modal.find('#deleteElementBtn').css("display", "none");
                return;
            }

            //modal.find('.modal-title').text('Подтвердите действие ' + recipient);
            //modal.find('.modal-body input').val(recipient);

            modal.find('#deleteElementBtn').css("display", "block");
            modal.find('.modal-body').text('Вы уверены, что хотите удалить этот элемент? Точно-точно, совсем-совсем?');
            App.ItemThatIsBeingDeleted = button.closest(".box");

        });


        //показ модального окна редактирования
        $('#modalEditNodeStandardButton').on('show.bs.modal', function (event) {

            var button = $(event.relatedTarget);
            var modal = $(this);

            HtmlController.pressedButton = button;
            var nodeName = button.closest('.box').children('.nameOfNodeDiv').children('.nameOfNodeH').text();

            //если стандартный узел, то написать, что так низя
            var isDefaultNode = IsDefaultNodeMy(button);

            if (isDefaultNode) {
                return;
            }

            modal.find('.modal-body').text('Редактирование тутутуту в модальном окне.');
            modal.find('#h5Test1').text(nodeName);


        });

        //удаление элемента
        $('#deleteElementBtn').on('click', function () {

            //скрыть модальное окно
            $('#exampleModal').modal('hide');

            var id = App.ItemThatIsBeingDeleted.closest('td').attr('id');
            var coord = get_x_y_fromTdId(id);

            TableController.matrix[coord.x][coord.y] = null;
            //console.log("deleted coord =" + coord);
            App.ItemThatIsBeingDeleted.remove();

            //TODO удалить в структуре

            redrawTable();
        });


        requestDich();


        function requestDich() {

            //console.log("запрос");

            var url_string = window.location.href;
            var url = new URL(url_string);
            var botId = url.searchParams.get("botId");

            $.ajax({
                url: "/BotForSalesEditing/GetSalesBotMarkup",
                data: { botId: botId },
                success: function (matrix) {

                    TableController.matrix = JSON.parse(matrix);
                    console.log(TableController.matrix);
                    fullRedraw();

                },
                //dataType: "json",
                error: function (xhr, ajaxOptions, thrownError) {
                    if (xhr.status == 418) {
                        //alert('в базе разметки нет');
                        console.log(thrownError);
                        return;
                    }


                }
            });

        }
    });

    function saveToDb() {
        console.log("сохранение");
        var markup = TableController.matrix;

        var url_string = window.location.href;
        var url = new URL(url_string);
        var botId = url.searchParams.get("botId");


        $.ajax({
            url: "/BotForSalesEditing/SaveSalesBotMarkup?botId=" + botId,
            type: "POST",
            data: {
                
                markup: JSON.stringify(markup)
            },
            success: function () {
                console.log('сохранение прошло нормально');
            }
        });


    }


    
    //var checks = {};
    //window.onbeforeunload = function () {
    //    return true;

    //    //for (var i in checks) {
    //    //    if (!checks[i]()) {
    //    //        return i;
    //    //    }
    //    //}
    //}

    //// Добавляем проверку того, что чекбокс установлен
    //checks['checkbox_managed'] = function () {
    //    var ch = document.querySelector('input[type=checkbox]');
    //    return ch.checked;
    //};


</script>


